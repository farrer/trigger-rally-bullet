#
# Trigger Rally GNUmakefile.MSYS64 for MSYS2 users
#
# This is a modified version of GNUmakefile.MSYS for Windows 64-bit builds.
#
# TODO:
#   * beautify printing of copied .DLL files
#

# standard GNU and custom variables
DISTNAME        := trigger-rally
DISTVER         := 0.6.5
DISTDIR         := $(DISTNAME)-$(DISTVER)
DISTARC         := $(DISTDIR)-win64.zip
TR_BINDIR       := ../bin
TR_EXENAME      := trigger-rally-x64.exe
TR_EXEFILE      := $(TR_BINDIR)/$(TR_EXENAME)
TR_DLLFILES     :=                  \
    $(TR_BINDIR)/fmod64.dll         \
    $(TR_BINDIR)/glew32.dll         \
    $(TR_BINDIR)/libjpeg-9.dll      \
    $(TR_BINDIR)/libphysfs.dll      \
    $(TR_BINDIR)/libpng16-16.dll    \
    $(TR_BINDIR)/SDL2.dll           \
    $(TR_BINDIR)/SDL2_image.dll     \
    $(TR_BINDIR)/zlib1.dll
FMODAPIDIR      := /c/Program Files (x86)/FMOD SoundSystem/FMOD Studio API Windows/api/lowlevel
PROJDIRS        := PEngine PSim TinyXML2 Trigger
SRCFILES        := $(shell find $(PROJDIRS) -type f -name "*.cpp")
OBJFILES        := $(patsubst %.cpp, %.o, $(SRCFILES))
DEPFILES        := $(patsubst %.cpp, %.d, $(SRCFILES))
WARNINGS        ?= -Wall -Wextra -pedantic
OPTIMS          ?= -march=native -mtune=native -Ofast
MODENV          ?= -m64
DMACROS         := -DNDEBUG -DWIN32 -DPACKAGE_VERSION=\"$(DISTVER)\"
INCDIRS         :=                  \
    -I'./include'                   \
    -I'/usr/local/include'          \
    -I'$(FMODAPIDIR)/inc'
LIBDIRS         :=                  \
    -L'/usr/local/lib'              \
    -L'$(FMODAPIDIR)/lib'
CXXFLAGS        += -std=c++11 $(MODENV) $(WARNINGS) $(OPTIMS)
CPPFLAGS        += $(DMACROS) $(INCDIRS)
EXTRA_LIBS      := -lmingw32 -lSDL2main -lopengl32 -lglu32 -lglew32 -lSDL2 -lSDL2_image -lphysfs -lfmod64
LDFLAGS         += $(MODENV) $(LIBDIRS) $(EXTRA_LIBS)

#
# phony targets, whose names aren't names of resulting files
#
# NOTE that several "standard" targets are missing; here
# `all` is `build` because I always felt "all" was a bad name,
# while the others I had either no time or no incentive to implement
#
.PHONY: build printvars dist clean winclean copydlls

# builds the executable and copies the .DLL files
build: printvars $(TR_EXEFILE) copydlls

#
# prints the variables that the user can change;
# if VAR is in the list, then the user can change it by running:
#
#   VAR="new value" make [target]
#
# examples:
#   OPTIMS="-O0 -g" make
#   prefix="/usr" exec_prefix="/usr" make install
#
printvars:
	@printf "\ncurrent values of user-set variables:\n"
	@printf "\tOPTIMS       ?= %s\n" "$(OPTIMS)"
	@printf "\tMODENV       ?= %s\n" "$(MODENV)"
	@printf "\tWARNINGS     ?= %s\n" "$(WARNINGS)"
	@printf "\n"
	@printf "resulting values of build variables:\n"
	@printf "\tCXXFLAGS     += %s\n" "$(CXXFLAGS)"
	@printf "\tCPPFLAGS     += %s\n" "$(CPPFLAGS)"
	@printf "\tLDFLAGS      += %s\n" "$(LDFLAGS)"
	@printf "\n"

#
# creates a .ZIP archive for redistribution
#
# NOTE that this fails if the directory we're in isn't named $(DISTDIR) however
# this is by design: it's meant to enforce directory naming consistency and
# awareness of the $(DISTVER) variable, which you must update for each release!
#
# NOTE that this target builds the game if it wasn't already and then performs
# a light clean, suitable for Windows users most of which prefer to have a
# working game out-of-the-box despite having downloaded the .ZIP archive instead
# of the Trigger Rally installer
#
# NOTE that this target requires the "msys-zip" bin package to be installed
#
dist: build winclean
	@printf "\nzip -> \"../../%s\"\n" "$(DISTARC)"
	@cd ../..; \
		zip --recurse-paths --quiet "$(DISTARC)" "$(DISTDIR)"
	@printf "md5sum -> \"../../%s.md5\"\n\n" "$(DISTARC)"
	@cd ../..; \
		md5sum "$(DISTARC)" > "$(DISTARC).md5"

# links the object files into the executable, which it then strips
$(TR_EXEFILE): $(OBJFILES)
	@printf "%s" $(CXX)
	@for file in $(OBJFILES); do \
		printf "\t%s\n" $$file; \
		done;
	@printf "\t-> %s\n" $@
	@$(CXX) -o $@ $(OBJFILES) $(LDFLAGS)
	@printf "strip\t%s\n" $@
	@strip $@

#
# removes object files, dependency files, .DLL files, executable and
# backup files (such as "func.cpp~")
#
clean:
	-@$(RM) --verbose \
		$(OBJFILES) \
		$(DEPFILES) \
		$(TR_DLLFILES) \
		$(TR_EXEFILE) \
		$(shell find -type f -name "*~")

#
# removes object files, dependency files and backup files (such as "func.cpp~")
#
# NOTE that the .DLL files and the game executable are not cleaned
#
winclean:
	-@$(RM) --verbose \
		$(OBJFILES) \
		$(DEPFILES) \
		$(shell find -type f -name "*~")

#
# includes dependency files; these files are needed to speed up
# the build process by excluding the compilation of object files
# which are already up-to-date
#
-include $(DEPFILES)

#
# compiles source files to object files
#
# GNUmakefile.MSYS64 was added as a dependency in order to trigger a rebuild
# if this makefile is edited
#
%.o: %.cpp GNUmakefile.MSYS64
	@printf "%s\t%s -> %s\n" $(CXX) $< $@
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) -MMD -MP -c $< -o $@

#
# the following targets handle the copying of .DLL files to the binary directory
#
# this section may be simplified in the future if FMOD support is
# dropped and all .DLL files can be copied from /local/bin exclusively
#

copydlls: $(TR_DLLFILES)

$(TR_BINDIR)/fmod64.dll:
	@cp --verbose "$(FMODAPIDIR)/lib/fmod64.dll" $(TR_BINDIR)

$(TR_BINDIR)/glew32.dll:
	@cp --verbose /usr/local/bin/glew32.dll $(TR_BINDIR)

$(TR_BINDIR)/libjpeg-9.dll:
	@cp --verbose /usr/local/bin/libjpeg-9.dll $(TR_BINDIR)

$(TR_BINDIR)/libphysfs.dll:
	@cp --verbose /usr/local/bin/libphysfs.dll $(TR_BINDIR)

$(TR_BINDIR)/libpng16-16.dll:
	@cp --verbose /usr/local/bin/libpng16-16.dll $(TR_BINDIR)

$(TR_BINDIR)/SDL2.dll:
	@cp --verbose /usr/local/bin/SDL2.dll $(TR_BINDIR)

$(TR_BINDIR)/SDL2_image.dll:
	@cp --verbose /usr/local/bin/SDL2_image.dll $(TR_BINDIR)

$(TR_BINDIR)/zlib1.dll:
	@cp --verbose /usr/local/bin/zlib1.dll $(TR_BINDIR)
