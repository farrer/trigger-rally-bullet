In this file I'll (farrer) keep track of the changes for configurations,
vehicles or track files needed for the the Bullet Physics Trigger Rally.

Definitive Changes:
   - Defined a new action map for brake, instead of the previous way of using 
     the 'back action' sometimes to go backward, sometimes to brake. The back 
     action will now only do backward input and will only start to be 
     effective when the car is stopped (in fact, when is almost stopped, where 
     speed <= 0.5km/h);

   - Vehicle's file now have the following changes:

     At <pstats>, wheeldrive is now effective. It's used to define
     which wheel will receive engine's torque (FWD: only front wheels; 
     RWD: only rear wheels; 4WD: all 4 whells).
     \
      removed weightkg definition. It's now defined by the mass definition on
      <genparams>.

     At <genparams> The mass is effective and should be defined in Kg (usually
     is). dimension is no more used, as it's now dynamic calculated by the 
     body's 3d model.
     \
      There's no more wheelscale parameter inside this section. The scale
      should be defined for each wheel.

     Each <wheel> should be defined with exact ordering, front-right,
     front-left, rear-right, rear-left, and have only the following parameters:
       <wheel scale="value" pos="x, y, z" />
       \
        scale: is the total scale of the wheel. To convert from old
             definitions, calculate the value by the old wheelscale * radius.
        pos: wheel position. Note that values for height (z) now define the
             height where the wheel connect to the chassis, in meters, and 
             should be different than the old ones (which was relative and in
             rendering units).
        friction: The coefficient of friction between the tyre and the ground.
             Should be about 0.8 for realistic cars, but can increased for 
             better handling.

     Added <brake> definition (as a child of vehicle), with the following:
       <brake normal="value" handbrake="value"> 
          The normal brake is effective on the wheels which receive engine's
          transmisson power. Handbrake will affect rear wheels. Usually, 
          handbrake values should be greater than normal brake ones. 
          Default: normal=50, handbrake=500.

     Added <suspension> definition (as a child of vehicle), with:
        <suspension stiffness="value" compressionk="value"
                    relaxationk="value" restlength="value"
                    connectionheight="value"/>
        \
         stiffness: reference values: 10.0 - Offroad buggy, 50.0 - Sports car, 
                    200.0 - F1 Car. Default: 35
         compressionk: constant to calculate the damping coefficient for when
                    suspension is compressed. Values from 0.1 to 0.3 are
                    good values. Default: 0.3
         relaxationk: constant to calculate the damping coefficient for when
                    suspension is expanding. Sould be slightly larger than
                    compressionk, eg: 0.2 to 0.5. Default: 0.5
         restlength: The maximum length of the suspension (metres). 
                    Default: 0.7

Current Changes (will need to revert them or do some work to be definitive):
   - Circuits with negative positions won't work, as I only defined the
     physical mesh to be positive and without overlaping a :1 map definition;
   - For the same reason, the car will fall under rendered terrain on 
     positions negative or greater than the defined for the terrain size;
   - With the port of the DrivingSystemInstance to work with the values from
     Bullet instead of the wrong ones from previous physics implementation, 
     probably the cars engine will act somewhat different. I've tested only
     with Cordo KitCar (and it's acting like a KitCar, rarely going near
     100-120km/h). Will check latter the other ones;

Currently Broken (will probably fix them) :
   - Car height position is broken. It's easy to fix, but will do that
     when the physical definition is complete to avoid double work;
   - Every rendering related to wheel's positions and angles are currently 
     broken, as I did not ported the old values to the new ones (so, the
     wheels aren't moving on the rendered vehicle, the dust trails won't 
     work, etc.);
   - Car's drift (will need to check the torque applied on that and port it
     to Bullet's model);
   - Slow down when off the 'road'. In fact I do not like the effect of
     slowing the car when off the defined road. For me just the time penalty
     should be sufficient;
   - Wheel values from vehicle file are currently ignored;
   - TODO: should read and define all physical values from vehicle's file.
   - TODO: should check the terrain's friction.

